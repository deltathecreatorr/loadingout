import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "@/app/navbar";
import { cookies } from "next/headers";
import jwt from "jsonwebtoken";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const token = (await cookies()).get("token")?.value || "";
  let isUserVerified = false;

  try {
    // The middleware already protects routes, this check is for UI rendering.
    if (token) {
      const decoded = jwt.verify(token, process.env.TOKEN_SECRET!) as {
        isVerified: boolean;
      };
      if (decoded) {
        isUserVerified = decoded.isVerified;
      }
    }
  } catch (error) {
    // Token is invalid or expired
    console.log("Invalid token:", error);
    isUserVerified = false;
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navbar isVerified={isUserVerified} />
        {children}
      </body>
    </html>
  );
}
